// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model League {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  authorId    String @db.ObjectId
  races       Race[] @relation("LeagueRaces")
  user        User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("leagues")
}

model Race {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  circuit      String
  series       Series
  raceDate     DateTime
  raceHour     String
  userId       String     @db.ObjectId
  participants String[]
  status       RaceStatus
  results      String[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  invites      Invite[]
  leagueId     String?    @db.ObjectId
  league       League?    @relation(fields: [leagueId], references: [id], name: "LeagueRaces", onDelete: Cascade)

  @@map("races")
}

model Invite {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  raceId    String @db.ObjectId
  userEmail String
  race      Race   @relation(fields: [raceId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@map("invites")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  races         Race[]
  invites       Invite[]
  leagues       League[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Series {
  F1
  GT3
  HYPERCAR
  GT3HYPERCAR
}

enum RaceStatus {
  BEFORE
  ONGOING
  ENDED
}
